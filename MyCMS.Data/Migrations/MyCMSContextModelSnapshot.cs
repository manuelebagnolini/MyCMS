// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyCMS.Data;

#nullable disable

namespace MyCMS.Data.Migrations
{
    [DbContext(typeof(MyCMSContext))]
    partial class MyCMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("MyCMS.Core.Models.Attribute", b =>
                {
                    b.Property<int>("AttributeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttributeType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AttributeID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("MyCMS.Core.Models.AttributeOption", b =>
                {
                    b.Property<int>("AttributeOptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttributeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AttributeOptionID");

                    b.HasIndex("AttributeID");

                    b.ToTable("AttributeOptions");
                });

            modelBuilder.Entity("MyCMS.Core.Models.Content", b =>
                {
                    b.Property<int>("ContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<int>("ContentTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateUserID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifyDatetime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ModifyUserID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("ContentID");

                    b.HasIndex("ContentTypeID");

                    b.HasIndex("CreateUserID");

                    b.HasIndex("ModifyUserID");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("MyCMS.Core.Models.ContentAttribute", b =>
                {
                    b.Property<int>("ContentAttributeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttributeID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AttributeOptionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContentID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ValueDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ValueNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValueText")
                        .HasColumnType("TEXT");

                    b.HasKey("ContentAttributeID");

                    b.HasIndex("AttributeID");

                    b.HasIndex("AttributeOptionID");

                    b.HasIndex("ContentID", "AttributeID")
                        .IsUnique();

                    b.ToTable("ContentAttributes");
                });

            modelBuilder.Entity("MyCMS.Core.Models.ContentRelation", b =>
                {
                    b.Property<int>("ContentRelationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContainerContentID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContentRelationTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReferredContentID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContentRelationID");

                    b.HasIndex("ContentRelationTypeID");

                    b.HasIndex("ReferredContentID");

                    b.HasIndex("ContainerContentID", "ReferredContentID", "ContentRelationTypeID")
                        .IsUnique();

                    b.ToTable("ContentRelations");
                });

            modelBuilder.Entity("MyCMS.Core.Models.ContentRelationType", b =>
                {
                    b.Property<int>("ContentRelationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContentRelationTypeID");

                    b.ToTable("ContentRelationTypes");
                });

            modelBuilder.Entity("MyCMS.Core.Models.ContentType", b =>
                {
                    b.Property<int>("ContentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContentTypeID");

                    b.ToTable("ContentTypes");
                });

            modelBuilder.Entity("MyCMS.Core.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyCMS.Core.Models.AttributeOption", b =>
                {
                    b.HasOne("MyCMS.Core.Models.Attribute", "Attribute")
                        .WithMany("Options")
                        .HasForeignKey("AttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("MyCMS.Core.Models.Content", b =>
                {
                    b.HasOne("MyCMS.Core.Models.ContentType", "ContentType")
                        .WithMany()
                        .HasForeignKey("ContentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyCMS.Core.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyCMS.Core.Models.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentType");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("MyCMS.Core.Models.ContentAttribute", b =>
                {
                    b.HasOne("MyCMS.Core.Models.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyCMS.Core.Models.AttributeOption", "AttributeOption")
                        .WithMany()
                        .HasForeignKey("AttributeOptionID");

                    b.HasOne("MyCMS.Core.Models.Content", "Content")
                        .WithMany("Attributes")
                        .HasForeignKey("ContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("AttributeOption");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("MyCMS.Core.Models.ContentRelation", b =>
                {
                    b.HasOne("MyCMS.Core.Models.Content", "ContainerContent")
                        .WithMany("Contents")
                        .HasForeignKey("ContainerContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyCMS.Core.Models.ContentRelationType", "ContentRelationType")
                        .WithMany()
                        .HasForeignKey("ContentRelationTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyCMS.Core.Models.Content", "ReferredContent")
                        .WithMany("ReferencedBy")
                        .HasForeignKey("ReferredContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainerContent");

                    b.Navigation("ContentRelationType");

                    b.Navigation("ReferredContent");
                });

            modelBuilder.Entity("MyCMS.Core.Models.Attribute", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("MyCMS.Core.Models.Content", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Contents");

                    b.Navigation("ReferencedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
