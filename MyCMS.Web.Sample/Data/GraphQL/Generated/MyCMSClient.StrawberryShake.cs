// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public static partial class MyCMSClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::MyCMS.Web.Sample.Data.GraphQL.State.MyCMSClientStoreAccessor> AddMyCMSClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::MyCMS.Web.Sample.Data.GraphQL.State.MyCMSClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyCMS.Web.Sample.Data.GraphQL.GetArticlesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyCMS.Web.Sample.Data.GraphQL.MyCMSClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyCMS.Web.Sample.Data.GraphQL.IMyCMSClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::MyCMS.Web.Sample.Data.GraphQL.State.MyCMSClientStoreAccessor>("MyCMSClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("MyCMSClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity, global::MyCMS.Web.Sample.Data.GraphQL.GetArticles_Content_Edges_Node_Content>, global::MyCMS.Web.Sample.Data.GraphQL.State.GetArticles_Content_Edges_Node_ContentFromContentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.UserEntity, global::MyCMS.Web.Sample.Data.GraphQL.GetArticles_Content_Edges_Node_CreateUser_User>, global::MyCMS.Web.Sample.Data.GraphQL.State.GetArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentAttributeEntity, global::MyCMS.Web.Sample.Data.GraphQL.GetArticles_Content_Edges_Node_Attributes_ContentAttribute>, global::MyCMS.Web.Sample.Data.GraphQL.State.GetArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentRelationEntity, global::MyCMS.Web.Sample.Data.GraphQL.GetArticles_Content_Edges_Node_HeaderImages_ContentRelation>, global::MyCMS.Web.Sample.Data.GraphQL.State.GetArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity, global::MyCMS.Web.Sample.Data.GraphQL.GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute>, global::MyCMS.Web.Sample.Data.GraphQL.State.GetArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity, global::MyCMS.Web.Sample.Data.GraphQL.GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption>, global::MyCMS.Web.Sample.Data.GraphQL.State.GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity, global::MyCMS.Web.Sample.Data.GraphQL.GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content>, global::MyCMS.Web.Sample.Data.GraphQL.State.GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MyCMS.Web.Sample.Data.GraphQL.AttributeTypesSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesResult>, global::MyCMS.Web.Sample.Data.GraphQL.State.GetArticlesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesResult>, global::MyCMS.Web.Sample.Data.GraphQL.State.GetArticlesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyCMS.Web.Sample.Data.GraphQL.GetArticlesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyCMS.Web.Sample.Data.GraphQL.GetArticlesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::MyCMS.Web.Sample.Data.GraphQL.State.MyCMSClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyCMS.Web.Sample.Data.GraphQL.MyCMSClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MyCMS.Web.Sample.Data.GraphQL.IMyCMSClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MyCMS.Web.Sample.Data.GraphQL.MyCMSClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace MyCMS.Web.Sample.Data.GraphQL
{
    /// <summary>
    /// Query type registered in GraphQL
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticlesResult : global::System.IEquatable<GetArticlesResult>, IGetArticlesResult
    {
        public GetArticlesResult(global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content? content)
        {
            Content = content;
        }

        /// <summary>
        /// Main query for inspect content.
        /// </summary>
        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content? Content { get; }

        public virtual global::System.Boolean Equals(GetArticlesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Content is null && other.Content is null) || Content != null && Content.Equals(other.Content)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetArticlesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Content != null)
                {
                    hash ^= 397 * Content.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_ContentConnection : global::System.IEquatable<GetArticles_Content_ContentConnection>, IGetArticles_Content_ContentConnection
    {
        public GetArticles_Content_ContentConnection(global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_PageInfo pageInfo, global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges>? edges)
        {
            PageInfo = pageInfo;
            Edges = edges;
        }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_PageInfo PageInfo { get; }

        /// <summary>
        /// A list of edges.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges>? Edges { get; }

        public virtual global::System.Boolean Equals(GetArticles_Content_ContentConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (PageInfo.Equals(other.PageInfo)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Edges, other.Edges);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetArticles_Content_ContentConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PageInfo.GetHashCode();
                if (Edges != null)
                {
                    foreach (var Edges_elm in Edges)
                    {
                        hash ^= 397 * Edges_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_PageInfo_PageInfo : global::System.IEquatable<GetArticles_Content_PageInfo_PageInfo>, IGetArticles_Content_PageInfo_PageInfo
    {
        public GetArticles_Content_PageInfo_PageInfo(global::System.Boolean hasNextPage, global::System.Boolean hasPreviousPage, global::System.String? startCursor, global::System.String? endCursor)
        {
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
            StartCursor = startCursor;
            EndCursor = endCursor;
        }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        public virtual global::System.Boolean Equals(GetArticles_Content_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (HasNextPage == other.HasNextPage) && HasPreviousPage == other.HasPreviousPage && ((StartCursor is null && other.StartCursor is null) || StartCursor != null && StartCursor.Equals(other.StartCursor)) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetArticles_Content_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HasNextPage.GetHashCode();
                hash ^= 397 * HasPreviousPage.GetHashCode();
                if (StartCursor != null)
                {
                    hash ^= 397 * StartCursor.GetHashCode();
                }

                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_ContentEdge : global::System.IEquatable<GetArticles_Content_Edges_ContentEdge>, IGetArticles_Content_Edges_ContentEdge
    {
        public GetArticles_Content_Edges_ContentEdge(global::System.String cursor, global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node? node)
        {
            Cursor = cursor;
            Node = node;
        }

        /// <summary>
        /// A cursor for use in pagination.
        /// </summary>
        public global::System.String Cursor { get; }

        /// <summary>
        /// The item at the end of the edge.
        /// </summary>
        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node? Node { get; }

        public virtual global::System.Boolean Equals(GetArticles_Content_Edges_ContentEdge? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Cursor.Equals(other.Cursor)) && ((Node is null && other.Node is null) || Node != null && Node.Equals(other.Node));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetArticles_Content_Edges_ContentEdge)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Cursor.GetHashCode();
                if (Node != null)
                {
                    hash ^= 397 * Node.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_Node_Content : global::System.IEquatable<GetArticles_Content_Edges_Node_Content>, IGetArticles_Content_Edges_Node_Content
    {
        public GetArticles_Content_Edges_Node_Content(global::System.String? title, global::System.String? body, global::System.DateTimeOffset createDatetime, global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_CreateUser? createUser, global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes?>? attributes, global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages?>? headerImages)
        {
            Title = title;
            Body = body;
            CreateDatetime = createDatetime;
            CreateUser = createUser;
            Attributes = attributes;
            HeaderImages = headerImages;
        }

        public global::System.String? Title { get; }

        public global::System.String? Body { get; }

        public global::System.DateTimeOffset CreateDatetime { get; }

        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_CreateUser? CreateUser { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes?>? Attributes { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages?>? HeaderImages { get; }

        public virtual global::System.Boolean Equals(GetArticles_Content_Edges_Node_Content? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title))) && ((Body is null && other.Body is null) || Body != null && Body.Equals(other.Body)) && CreateDatetime.Equals(other.CreateDatetime) && ((CreateUser is null && other.CreateUser is null) || CreateUser != null && CreateUser.Equals(other.CreateUser)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Attributes, other.Attributes) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(HeaderImages, other.HeaderImages);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetArticles_Content_Edges_Node_Content)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                if (Body != null)
                {
                    hash ^= 397 * Body.GetHashCode();
                }

                hash ^= 397 * CreateDatetime.GetHashCode();
                if (CreateUser != null)
                {
                    hash ^= 397 * CreateUser.GetHashCode();
                }

                if (Attributes != null)
                {
                    foreach (var Attributes_elm in Attributes)
                    {
                        if (Attributes_elm != null)
                        {
                            hash ^= 397 * Attributes_elm.GetHashCode();
                        }
                    }
                }

                if (HeaderImages != null)
                {
                    foreach (var HeaderImages_elm in HeaderImages)
                    {
                        if (HeaderImages_elm != null)
                        {
                            hash ^= 397 * HeaderImages_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_Node_CreateUser_User : global::System.IEquatable<GetArticles_Content_Edges_Node_CreateUser_User>, IGetArticles_Content_Edges_Node_CreateUser_User
    {
        public GetArticles_Content_Edges_Node_CreateUser_User(global::System.String? username)
        {
            Username = username;
        }

        public global::System.String? Username { get; }

        public virtual global::System.Boolean Equals(GetArticles_Content_Edges_Node_CreateUser_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Username is null && other.Username is null) || Username != null && Username.Equals(other.Username)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetArticles_Content_Edges_Node_CreateUser_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Username != null)
                {
                    hash ^= 397 * Username.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_Node_Attributes_ContentAttribute : global::System.IEquatable<GetArticles_Content_Edges_Node_Attributes_ContentAttribute>, IGetArticles_Content_Edges_Node_Attributes_ContentAttribute
    {
        public GetArticles_Content_Edges_Node_Attributes_ContentAttribute(global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes_Attribute? attribute, global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes_AttributeOption? attributeOption, global::System.String? valueText, global::System.DateTimeOffset? valueDate, global::System.Int32? valueNumber)
        {
            Attribute = attribute;
            AttributeOption = attributeOption;
            ValueText = valueText;
            ValueDate = valueDate;
            ValueNumber = valueNumber;
        }

        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes_Attribute? Attribute { get; }

        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes_AttributeOption? AttributeOption { get; }

        public global::System.String? ValueText { get; }

        public global::System.DateTimeOffset? ValueDate { get; }

        public global::System.Int32? ValueNumber { get; }

        public virtual global::System.Boolean Equals(GetArticles_Content_Edges_Node_Attributes_ContentAttribute? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Attribute is null && other.Attribute is null) || Attribute != null && Attribute.Equals(other.Attribute))) && ((AttributeOption is null && other.AttributeOption is null) || AttributeOption != null && AttributeOption.Equals(other.AttributeOption)) && ((ValueText is null && other.ValueText is null) || ValueText != null && ValueText.Equals(other.ValueText)) && ((ValueDate is null && other.ValueDate is null) || ValueDate != null && ValueDate.Equals(other.ValueDate)) && ValueNumber == other.ValueNumber;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetArticles_Content_Edges_Node_Attributes_ContentAttribute)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Attribute != null)
                {
                    hash ^= 397 * Attribute.GetHashCode();
                }

                if (AttributeOption != null)
                {
                    hash ^= 397 * AttributeOption.GetHashCode();
                }

                if (ValueText != null)
                {
                    hash ^= 397 * ValueText.GetHashCode();
                }

                if (ValueDate != null)
                {
                    hash ^= 397 * ValueDate.GetHashCode();
                }

                if (ValueNumber != null)
                {
                    hash ^= 397 * ValueNumber.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_Node_HeaderImages_ContentRelation : global::System.IEquatable<GetArticles_Content_Edges_Node_HeaderImages_ContentRelation>, IGetArticles_Content_Edges_Node_HeaderImages_ContentRelation
    {
        public GetArticles_Content_Edges_Node_HeaderImages_ContentRelation(global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages_ReferredContent? referredContent)
        {
            ReferredContent = referredContent;
        }

        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages_ReferredContent? ReferredContent { get; }

        public virtual global::System.Boolean Equals(GetArticles_Content_Edges_Node_HeaderImages_ContentRelation? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ReferredContent is null && other.ReferredContent is null) || ReferredContent != null && ReferredContent.Equals(other.ReferredContent)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetArticles_Content_Edges_Node_HeaderImages_ContentRelation)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ReferredContent != null)
                {
                    hash ^= 397 * ReferredContent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute : global::System.IEquatable<GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute>, IGetArticles_Content_Edges_Node_Attributes_Attribute_Attribute
    {
        public GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute(global::System.String? name, global::MyCMS.Web.Sample.Data.GraphQL.AttributeTypes attributeType)
        {
            Name = name;
            AttributeType = attributeType;
        }

        public global::System.String? Name { get; }

        public global::MyCMS.Web.Sample.Data.GraphQL.AttributeTypes AttributeType { get; }

        public virtual global::System.Boolean Equals(GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && AttributeType.Equals(other.AttributeType);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * AttributeType.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption : global::System.IEquatable<GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption>, IGetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption
    {
        public GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption(global::System.String? @value)
        {
            Value = @value;
        }

        public global::System.String? Value { get; }

        public virtual global::System.Boolean Equals(GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Value is null && other.Value is null) || Value != null && Value.Equals(other.Value)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content : global::System.IEquatable<GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content>, IGetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content
    {
        public GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content(global::System.String? title, global::System.String? url)
        {
            Title = title;
            Url = url;
        }

        public global::System.String? Title { get; }

        public global::System.String? Url { get; }

        public virtual global::System.Boolean Equals(GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title))) && ((Url is null && other.Url is null) || Url != null && Url.Equals(other.Url));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                if (Url != null)
                {
                    hash ^= 397 * Url.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Query type registered in GraphQL
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticlesResult
    {
        /// <summary>
        /// Main query for inspect content.
        /// </summary>
        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content? Content { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content
    {
        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_PageInfo PageInfo { get; }

        /// <summary>
        /// A list of edges.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges>? Edges { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_ContentConnection : IGetArticles_Content
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_PageInfo
    {
        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_PageInfo_PageInfo : IGetArticles_Content_PageInfo
    {
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges
    {
        /// <summary>
        /// A cursor for use in pagination.
        /// </summary>
        public global::System.String Cursor { get; }

        /// <summary>
        /// The item at the end of the edge.
        /// </summary>
        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node? Node { get; }
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_ContentEdge : IGetArticles_Content_Edges
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_Node
    {
        public global::System.String? Title { get; }

        public global::System.String? Body { get; }

        public global::System.DateTimeOffset CreateDatetime { get; }

        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_CreateUser? CreateUser { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes?>? Attributes { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages?>? HeaderImages { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_Node_Content : IGetArticles_Content_Edges_Node
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_Node_CreateUser
    {
        public global::System.String? Username { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_Node_CreateUser_User : IGetArticles_Content_Edges_Node_CreateUser
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_Node_Attributes
    {
        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes_Attribute? Attribute { get; }

        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes_AttributeOption? AttributeOption { get; }

        public global::System.String? ValueText { get; }

        public global::System.DateTimeOffset? ValueDate { get; }

        public global::System.Int32? ValueNumber { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_Node_Attributes_ContentAttribute : IGetArticles_Content_Edges_Node_Attributes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_Node_HeaderImages
    {
        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages_ReferredContent? ReferredContent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_Node_HeaderImages_ContentRelation : IGetArticles_Content_Edges_Node_HeaderImages
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_Node_Attributes_Attribute
    {
        public global::System.String? Name { get; }

        public global::MyCMS.Web.Sample.Data.GraphQL.AttributeTypes AttributeType { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_Node_Attributes_Attribute_Attribute : IGetArticles_Content_Edges_Node_Attributes_Attribute
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_Node_Attributes_AttributeOption
    {
        public global::System.String? Value { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption : IGetArticles_Content_Edges_Node_Attributes_AttributeOption
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_Node_HeaderImages_ReferredContent
    {
        public global::System.String? Title { get; }

        public global::System.String? Url { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content : IGetArticles_Content_Edges_Node_HeaderImages_ReferredContent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public enum AttributeTypes
    {
        Text,
        Number,
        Date,
        Select
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AttributeTypesSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, AttributeTypes>
    {
        public global::System.String TypeName => "AttributeTypes";
        public AttributeTypes Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "TEXT" => AttributeTypes.Text,
                "NUMBER" => AttributeTypes.Number,
                "DATE" => AttributeTypes.Date,
                "SELECT" => AttributeTypes.Select,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                AttributeTypes.Text => "TEXT",
                AttributeTypes.Number => "NUMBER",
                AttributeTypes.Date => "DATE",
                AttributeTypes.Select => "SELECT",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the GetArticles GraphQL operation
    /// <code>
    /// query GetArticles($first: Int, $last: Int, $sfter: String, $before: String) {
    ///   content(first: $first, last: $last, after: $sfter, before: $before, where: { contentType: { name: { eq: "Article" } } }, order: { createDatetime: DESC }) {
    ///     __typename
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///       endCursor
    ///     }
    ///     edges {
    ///       __typename
    ///       cursor
    ///       node {
    ///         __typename
    ///         title
    ///         body
    ///         createDatetime
    ///         createUser {
    ///           __typename
    ///           username
    ///           ... on User {
    ///             id
    ///           }
    ///         }
    ///         attributes {
    ///           __typename
    ///           attribute {
    ///             __typename
    ///             name
    ///             attributeType
    ///             ... on Attribute {
    ///               id
    ///             }
    ///           }
    ///           attributeOption {
    ///             __typename
    ///             value
    ///             ... on AttributeOption {
    ///               id
    ///             }
    ///           }
    ///           valueText
    ///           valueDate
    ///           valueNumber
    ///           ... on ContentAttribute {
    ///             id
    ///           }
    ///         }
    ///         headerImages: contents(where: { and: [ { contentRelationType: { name: { eq: "Header" } } }, { referredContent: { contentType: { name: { eq: "Image" } } } } ] }) {
    ///           __typename
    ///           referredContent {
    ///             __typename
    ///             title
    ///             url
    ///             ... on Content {
    ///               id
    ///             }
    ///           }
    ///           ... on ContentRelation {
    ///             id
    ///           }
    ///         }
    ///         ... on Content {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticlesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetArticlesQueryDocument()
        {
        }

        public static GetArticlesQueryDocument Instance { get; } = new GetArticlesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x28, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x2c, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x2c, 0x20, 0x24, 0x73, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x2c, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x2c, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x73, 0x66, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3a, 0x20, 0x24, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x22, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x44, 0x45, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x65, 0x64, 0x67, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x65, 0x78, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x61, 0x6e, 0x64, 0x3a, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x22, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x2c, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x22, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x5d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x75, 0x72, 0x6c, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b3d5827ba6ebc7b577213a9abc4f6a62");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetArticles GraphQL operation
    /// <code>
    /// query GetArticles($first: Int, $last: Int, $sfter: String, $before: String) {
    ///   content(first: $first, last: $last, after: $sfter, before: $before, where: { contentType: { name: { eq: "Article" } } }, order: { createDatetime: DESC }) {
    ///     __typename
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///       endCursor
    ///     }
    ///     edges {
    ///       __typename
    ///       cursor
    ///       node {
    ///         __typename
    ///         title
    ///         body
    ///         createDatetime
    ///         createUser {
    ///           __typename
    ///           username
    ///           ... on User {
    ///             id
    ///           }
    ///         }
    ///         attributes {
    ///           __typename
    ///           attribute {
    ///             __typename
    ///             name
    ///             attributeType
    ///             ... on Attribute {
    ///               id
    ///             }
    ///           }
    ///           attributeOption {
    ///             __typename
    ///             value
    ///             ... on AttributeOption {
    ///               id
    ///             }
    ///           }
    ///           valueText
    ///           valueDate
    ///           valueNumber
    ///           ... on ContentAttribute {
    ///             id
    ///           }
    ///         }
    ///         headerImages: contents(where: { and: [ { contentRelationType: { name: { eq: "Header" } } }, { referredContent: { contentType: { name: { eq: "Image" } } } } ] }) {
    ///           __typename
    ///           referredContent {
    ///             __typename
    ///             title
    ///             url
    ///             ... on Content {
    ///               id
    ///             }
    ///           }
    ///           ... on ContentRelation {
    ///             id
    ///           }
    ///         }
    ///         ... on Content {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticlesQuery : global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetArticlesResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetArticlesQuery(global::StrawberryShake.IOperationExecutor<IGetArticlesResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetArticlesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetArticlesResult>> ExecuteAsync(global::System.Int32? first, global::System.Int32? last, global::System.String? sfter, global::System.String? before, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(first, last, sfter, before);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetArticlesResult>> Watch(global::System.Int32? first, global::System.Int32? last, global::System.String? sfter, global::System.String? before, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(first, last, sfter, before);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32? first, global::System.Int32? last, global::System.String? sfter, global::System.String? before)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("first", FormatFirst(first));
            variables.Add("last", FormatLast(last));
            variables.Add("sfter", FormatSfter(sfter));
            variables.Add("before", FormatBefore(before));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetArticlesQueryDocument.Instance.Hash.Value, name: "GetArticles", document: GetArticlesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFirst(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        private global::System.Object? FormatLast(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        private global::System.Object? FormatSfter(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatBefore(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetArticles GraphQL operation
    /// <code>
    /// query GetArticles($first: Int, $last: Int, $sfter: String, $before: String) {
    ///   content(first: $first, last: $last, after: $sfter, before: $before, where: { contentType: { name: { eq: "Article" } } }, order: { createDatetime: DESC }) {
    ///     __typename
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///       endCursor
    ///     }
    ///     edges {
    ///       __typename
    ///       cursor
    ///       node {
    ///         __typename
    ///         title
    ///         body
    ///         createDatetime
    ///         createUser {
    ///           __typename
    ///           username
    ///           ... on User {
    ///             id
    ///           }
    ///         }
    ///         attributes {
    ///           __typename
    ///           attribute {
    ///             __typename
    ///             name
    ///             attributeType
    ///             ... on Attribute {
    ///               id
    ///             }
    ///           }
    ///           attributeOption {
    ///             __typename
    ///             value
    ///             ... on AttributeOption {
    ///               id
    ///             }
    ///           }
    ///           valueText
    ///           valueDate
    ///           valueNumber
    ///           ... on ContentAttribute {
    ///             id
    ///           }
    ///         }
    ///         headerImages: contents(where: { and: [ { contentRelationType: { name: { eq: "Header" } } }, { referredContent: { contentType: { name: { eq: "Image" } } } } ] }) {
    ///           __typename
    ///           referredContent {
    ///             __typename
    ///             title
    ///             url
    ///             ... on Content {
    ///               id
    ///             }
    ///           }
    ///           ... on ContentRelation {
    ///             id
    ///           }
    ///         }
    ///         ... on Content {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetArticlesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetArticlesResult>> ExecuteAsync(global::System.Int32? first, global::System.Int32? last, global::System.String? sfter, global::System.String? before, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetArticlesResult>> Watch(global::System.Int32? first, global::System.Int32? last, global::System.String? sfter, global::System.String? before, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the MyCMSClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class MyCMSClient : global::MyCMS.Web.Sample.Data.GraphQL.IMyCMSClient
    {
        private readonly global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesQuery _getArticles;
        public MyCMSClient(global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesQuery getArticles)
        {
            _getArticles = getArticles ?? throw new global::System.ArgumentNullException(nameof(getArticles));
        }

        public static global::System.String ClientName => "MyCMSClient";
        public global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesQuery GetArticles => _getArticles;
    }

    /// <summary>
    /// Represents the MyCMSClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IMyCMSClient
    {
        global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesQuery GetArticles { get; }
    }
}

namespace MyCMS.Web.Sample.Data.GraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ContentEntity
    {
        public ContentEntity(global::System.String? title = default !, global::System.String? body = default !, global::System.DateTimeOffset createDatetime = default !, global::StrawberryShake.EntityId? createUser = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? attributes = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? headerImages = default !, global::System.String? url = default !)
        {
            Title = title;
            Body = body;
            CreateDatetime = createDatetime;
            CreateUser = createUser;
            Attributes = attributes;
            HeaderImages = headerImages;
            Url = url;
        }

        public global::System.String? Title { get; }

        public global::System.String? Body { get; }

        public global::System.DateTimeOffset CreateDatetime { get; }

        public global::StrawberryShake.EntityId? CreateUser { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Attributes { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? HeaderImages { get; }

        public global::System.String? Url { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class UserEntity
    {
        public UserEntity(global::System.String? username = default !)
        {
            Username = username;
        }

        public global::System.String? Username { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ContentAttributeEntity
    {
        public ContentAttributeEntity(global::StrawberryShake.EntityId? attribute = default !, global::StrawberryShake.EntityId? attributeOption = default !, global::System.String? valueText = default !, global::System.DateTimeOffset? valueDate = default !, global::System.Int32? valueNumber = default !)
        {
            Attribute = attribute;
            AttributeOption = attributeOption;
            ValueText = valueText;
            ValueDate = valueDate;
            ValueNumber = valueNumber;
        }

        public global::StrawberryShake.EntityId? Attribute { get; }

        public global::StrawberryShake.EntityId? AttributeOption { get; }

        public global::System.String? ValueText { get; }

        public global::System.DateTimeOffset? ValueDate { get; }

        public global::System.Int32? ValueNumber { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ContentRelationEntity
    {
        public ContentRelationEntity(global::StrawberryShake.EntityId? referredContent = default !)
        {
            ReferredContent = referredContent;
        }

        public global::StrawberryShake.EntityId? ReferredContent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AttributeEntity
    {
        public AttributeEntity(global::System.String? name = default !, global::MyCMS.Web.Sample.Data.GraphQL.AttributeTypes attributeType = default !)
        {
            Name = name;
            AttributeType = attributeType;
        }

        public global::System.String? Name { get; }

        public global::MyCMS.Web.Sample.Data.GraphQL.AttributeTypes AttributeType { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AttributeOptionEntity
    {
        public AttributeOptionEntity(global::System.String? @value = default !)
        {
            Value = @value;
        }

        public global::System.String? Value { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticlesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MyCMS.Web.Sample.Data.GraphQL.GetArticlesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity, GetArticles_Content_Edges_Node_Content> _getArticles_Content_Edges_Node_ContentFromContentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.UserEntity, GetArticles_Content_Edges_Node_CreateUser_User> _getArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentAttributeEntity, GetArticles_Content_Edges_Node_Attributes_ContentAttribute> _getArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity, GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute> _getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity, GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption> _getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentRelationEntity, GetArticles_Content_Edges_Node_HeaderImages_ContentRelation> _getArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity, GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content> _getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper;
        public GetArticlesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity, GetArticles_Content_Edges_Node_Content> getArticles_Content_Edges_Node_ContentFromContentEntityMapper, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.UserEntity, GetArticles_Content_Edges_Node_CreateUser_User> getArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentAttributeEntity, GetArticles_Content_Edges_Node_Attributes_ContentAttribute> getArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity, GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute> getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity, GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption> getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentRelationEntity, GetArticles_Content_Edges_Node_HeaderImages_ContentRelation> getArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity, GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content> getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getArticles_Content_Edges_Node_ContentFromContentEntityMapper = getArticles_Content_Edges_Node_ContentFromContentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_ContentFromContentEntityMapper));
            _getArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper = getArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper));
            _getArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper = getArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper));
            _getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper = getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper));
            _getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper = getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper));
            _getArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper = getArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper));
            _getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper = getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesResult);
        public GetArticlesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetArticlesResultInfo info)
            {
                return new GetArticlesResult(MapIGetArticles_Content(info.Content, snapshot));
            }

            throw new global::System.ArgumentException("GetArticlesResultInfo expected.");
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content? MapIGetArticles_Content(global::MyCMS.Web.Sample.Data.GraphQL.State.ContentConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetArticles_Content returnValue = default !;
            if (data?.__typename.Equals("ContentConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetArticles_Content_ContentConnection(MapNonNullableIGetArticles_Content_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot), MapIGetArticles_Content_EdgesNonNullableArray(data.Edges, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_PageInfo MapNonNullableIGetArticles_Content_PageInfo(global::MyCMS.Web.Sample.Data.GraphQL.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetArticles_Content_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetArticles_Content_PageInfo_PageInfo(data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.HasPreviousPage ?? throw new global::System.ArgumentNullException(), data.StartCursor, data.EndCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges>? MapIGetArticles_Content_EdgesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEdgeData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var contentEdges = new global::System.Collections.Generic.List<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges>();
            foreach (global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEdgeData child in list)
            {
                contentEdges.Add(MapNonNullableIGetArticles_Content_Edges(child, snapshot));
            }

            return contentEdges;
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges MapNonNullableIGetArticles_Content_Edges(global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEdgeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetArticles_Content_Edges returnValue = default !;
            if (data.__typename.Equals("ContentEdge", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetArticles_Content_Edges_ContentEdge(data.Cursor ?? throw new global::System.ArgumentNullException(), MapIGetArticles_Content_Edges_Node(data.Node, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node? MapIGetArticles_Content_Edges_Node(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Content", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_ContentFromContentEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_CreateUser? MapIGetArticles_Content_Edges_Node_CreateUser(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes?>? MapIGetArticles_Content_Edges_Node_AttributesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var contentAttributes = new global::System.Collections.Generic.List<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                contentAttributes.Add(MapIGetArticles_Content_Edges_Node_Attributes(child, snapshot));
            }

            return contentAttributes;
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes? MapIGetArticles_Content_Edges_Node_Attributes(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ContentAttribute", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentAttributeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes_Attribute? MapIGetArticles_Content_Edges_Node_Attributes_Attribute(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Attribute", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes_AttributeOption? MapIGetArticles_Content_Edges_Node_Attributes_AttributeOption(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("AttributeOption", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages?>? MapIGetArticles_Content_Edges_Node_HeaderImagesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var contentRelations = new global::System.Collections.Generic.List<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                contentRelations.Add(MapIGetArticles_Content_Edges_Node_HeaderImages(child, snapshot));
            }

            return contentRelations;
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages? MapIGetArticles_Content_Edges_Node_HeaderImages(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ContentRelation", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentRelationEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages_ReferredContent? MapIGetArticles_Content_Edges_Node_HeaderImages_ReferredContent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Content", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticlesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetArticlesResultInfo(global::MyCMS.Web.Sample.Data.GraphQL.State.ContentConnectionData? content, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Content = content;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Main query for inspect content.
        /// </summary>
        public global::MyCMS.Web.Sample.Data.GraphQL.State.ContentConnectionData? Content { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetArticlesResultInfo(Content, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_Node_ContentFromContentEntityMapper : global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity, GetArticles_Content_Edges_Node_Content>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.UserEntity, GetArticles_Content_Edges_Node_CreateUser_User> _getArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentAttributeEntity, GetArticles_Content_Edges_Node_Attributes_ContentAttribute> _getArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity, GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute> _getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity, GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption> _getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentRelationEntity, GetArticles_Content_Edges_Node_HeaderImages_ContentRelation> _getArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity, GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content> _getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper;
        public GetArticles_Content_Edges_Node_ContentFromContentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.UserEntity, GetArticles_Content_Edges_Node_CreateUser_User> getArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentAttributeEntity, GetArticles_Content_Edges_Node_Attributes_ContentAttribute> getArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity, GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute> getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity, GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption> getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentRelationEntity, GetArticles_Content_Edges_Node_HeaderImages_ContentRelation> getArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity, GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content> getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper = getArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper));
            _getArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper = getArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper));
            _getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper = getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper));
            _getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper = getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper));
            _getArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper = getArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper));
            _getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper = getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper));
        }

        public GetArticles_Content_Edges_Node_Content Map(global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetArticles_Content_Edges_Node_Content(entity.Title, entity.Body, entity.CreateDatetime, MapIGetArticles_Content_Edges_Node_CreateUser(entity.CreateUser, snapshot), MapIGetArticles_Content_Edges_Node_AttributesArray(entity.Attributes, snapshot), MapIGetArticles_Content_Edges_Node_HeaderImagesArray(entity.HeaderImages, snapshot));
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_CreateUser? MapIGetArticles_Content_Edges_Node_CreateUser(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes?>? MapIGetArticles_Content_Edges_Node_AttributesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var contentAttributes = new global::System.Collections.Generic.List<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                contentAttributes.Add(MapIGetArticles_Content_Edges_Node_Attributes(child, snapshot));
            }

            return contentAttributes;
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes? MapIGetArticles_Content_Edges_Node_Attributes(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ContentAttribute", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentAttributeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes_Attribute? MapIGetArticles_Content_Edges_Node_Attributes_Attribute(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Attribute", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes_AttributeOption? MapIGetArticles_Content_Edges_Node_Attributes_AttributeOption(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("AttributeOption", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages?>? MapIGetArticles_Content_Edges_Node_HeaderImagesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var contentRelations = new global::System.Collections.Generic.List<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                contentRelations.Add(MapIGetArticles_Content_Edges_Node_HeaderImages(child, snapshot));
            }

            return contentRelations;
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages? MapIGetArticles_Content_Edges_Node_HeaderImages(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ContentRelation", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentRelationEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages_ReferredContent? MapIGetArticles_Content_Edges_Node_HeaderImages_ReferredContent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Content", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.UserEntity, GetArticles_Content_Edges_Node_CreateUser_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetArticles_Content_Edges_Node_CreateUser_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetArticles_Content_Edges_Node_CreateUser_User Map(global::MyCMS.Web.Sample.Data.GraphQL.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetArticles_Content_Edges_Node_CreateUser_User(entity.Username);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper : global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentAttributeEntity, GetArticles_Content_Edges_Node_Attributes_ContentAttribute>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity, GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute> _getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity, GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption> _getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper;
        public GetArticles_Content_Edges_Node_Attributes_ContentAttributeFromContentAttributeEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity, GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute> getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity, GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption> getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper = getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper));
            _getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper = getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper));
        }

        public GetArticles_Content_Edges_Node_Attributes_ContentAttribute Map(global::MyCMS.Web.Sample.Data.GraphQL.State.ContentAttributeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetArticles_Content_Edges_Node_Attributes_ContentAttribute(MapIGetArticles_Content_Edges_Node_Attributes_Attribute(entity.Attribute, snapshot), MapIGetArticles_Content_Edges_Node_Attributes_AttributeOption(entity.AttributeOption, snapshot), entity.ValueText, entity.ValueDate, entity.ValueNumber);
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes_Attribute? MapIGetArticles_Content_Edges_Node_Attributes_Attribute(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Attribute", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_Attributes_AttributeOption? MapIGetArticles_Content_Edges_Node_Attributes_AttributeOption(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("AttributeOption", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper : global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentRelationEntity, GetArticles_Content_Edges_Node_HeaderImages_ContentRelation>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity, GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content> _getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper;
        public GetArticles_Content_Edges_Node_HeaderImages_ContentRelationFromContentRelationEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity, GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content> getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper = getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper));
        }

        public GetArticles_Content_Edges_Node_HeaderImages_ContentRelation Map(global::MyCMS.Web.Sample.Data.GraphQL.State.ContentRelationEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetArticles_Content_Edges_Node_HeaderImages_ContentRelation(MapIGetArticles_Content_Edges_Node_HeaderImages_ReferredContent(entity.ReferredContent, snapshot));
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.IGetArticles_Content_Edges_Node_HeaderImages_ReferredContent? MapIGetArticles_Content_Edges_Node_HeaderImages_ReferredContent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Content", global::System.StringComparison.Ordinal))
            {
                return _getArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper.Map(snapshot.GetEntity<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper : global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity, GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetArticles_Content_Edges_Node_Attributes_Attribute_AttributeFromAttributeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute Map(global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetArticles_Content_Edges_Node_Attributes_Attribute_Attribute(entity.Name, entity.AttributeType);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper : global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity, GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOptionFromAttributeOptionEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption Map(global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetArticles_Content_Edges_Node_Attributes_AttributeOption_AttributeOption(entity.Value);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper : global::StrawberryShake.IEntityMapper<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity, GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_ContentFromContentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content Map(global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetArticles_Content_Edges_Node_HeaderImages_ReferredContent_Content(entity.Title, entity.Url);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetArticlesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::MyCMS.Web.Sample.Data.GraphQL.AttributeTypes> _attributeTypesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetArticlesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MyCMS.Web.Sample.Data.GraphQL.IGetArticlesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _attributeTypesParser = serializerResolver.GetLeafValueParser<global::System.String, global::MyCMS.Web.Sample.Data.GraphQL.AttributeTypes>("AttributeTypes") ?? throw new global::System.ArgumentException("No serializer for type `AttributeTypes` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetArticlesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetArticlesResult Result, GetArticlesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetArticlesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetArticlesResult, GetArticlesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::MyCMS.Web.Sample.Data.GraphQL.State.ContentConnectionData? contentId = default !;
            _entityStore.Update(session =>
            {
                contentId = DeserializeIGetArticles_Content(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetArticlesResultInfo(contentId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.State.ContentConnectionData? DeserializeIGetArticles_Content(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ContentConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyCMS.Web.Sample.Data.GraphQL.State.ContentConnectionData(typename, pageInfo: DeserializeNonNullableIGetArticles_Content_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")), edges: DeserializeIGetArticles_Content_EdgesNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "edges"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.State.PageInfoData DeserializeNonNullableIGetArticles_Content_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyCMS.Web.Sample.Data.GraphQL.State.PageInfoData(typename, hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), hasPreviousPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasPreviousPage")), startCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startCursor")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEdgeData>? DeserializeIGetArticles_Content_EdgesNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var contentEdges = new global::System.Collections.Generic.List<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEdgeData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                contentEdges.Add(DeserializeNonNullableIGetArticles_Content_Edges(session, child, entityIds));
            }

            return contentEdges;
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEdgeData DeserializeNonNullableIGetArticles_Content_Edges(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ContentEdge", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEdgeData(typename, cursor: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cursor")), node: UpdateIGetArticles_Content_Edges_NodeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "node"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId? UpdateIGetArticles_Content_Edges_NodeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Content", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity? entity))
                {
                    session.SetEntity(entityId, new global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "body")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createDatetime")), UpdateIGetArticles_Content_Edges_Node_CreateUserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createUser"), entityIds), UpdateIGetArticles_Content_Edges_Node_AttributesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "attributes"), entityIds), UpdateIGetArticles_Content_Edges_Node_HeaderImagesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "headerImages"), entityIds), entity.Url));
                }
                else
                {
                    session.SetEntity(entityId, new global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "body")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createDatetime")), UpdateIGetArticles_Content_Edges_Node_CreateUserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createUser"), entityIds), UpdateIGetArticles_Content_Edges_Node_AttributesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "attributes"), entityIds), UpdateIGetArticles_Content_Edges_Node_HeaderImagesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "headerImages"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId? UpdateIGetArticles_Content_Edges_Node_CreateUserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MyCMS.Web.Sample.Data.GraphQL.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::MyCMS.Web.Sample.Data.GraphQL.State.UserEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::MyCMS.Web.Sample.Data.GraphQL.State.UserEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetArticles_Content_Edges_Node_AttributesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var contentAttributes = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                contentAttributes.Add(UpdateIGetArticles_Content_Edges_Node_AttributesEntity(session, child, entityIds));
            }

            return contentAttributes;
        }

        private global::StrawberryShake.EntityId? UpdateIGetArticles_Content_Edges_Node_AttributesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ContentAttribute", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MyCMS.Web.Sample.Data.GraphQL.State.ContentAttributeEntity? entity))
                {
                    session.SetEntity(entityId, new global::MyCMS.Web.Sample.Data.GraphQL.State.ContentAttributeEntity(UpdateIGetArticles_Content_Edges_Node_Attributes_AttributeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "attribute"), entityIds), UpdateIGetArticles_Content_Edges_Node_Attributes_AttributeOptionEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "attributeOption"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valueText")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valueDate")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valueNumber"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::MyCMS.Web.Sample.Data.GraphQL.State.ContentAttributeEntity(UpdateIGetArticles_Content_Edges_Node_Attributes_AttributeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "attribute"), entityIds), UpdateIGetArticles_Content_Edges_Node_Attributes_AttributeOptionEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "attributeOption"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valueText")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valueDate")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valueNumber"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetArticles_Content_Edges_Node_Attributes_AttributeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Attribute", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity? entity))
                {
                    session.SetEntity(entityId, new global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableAttributeTypes(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "attributeType"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableAttributeTypes(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "attributeType"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::MyCMS.Web.Sample.Data.GraphQL.AttributeTypes DeserializeNonNullableAttributeTypes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _attributeTypesParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId? UpdateIGetArticles_Content_Edges_Node_Attributes_AttributeOptionEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("AttributeOption", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity? entity))
                {
                    session.SetEntity(entityId, new global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::MyCMS.Web.Sample.Data.GraphQL.State.AttributeOptionEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetArticles_Content_Edges_Node_HeaderImagesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var contentRelations = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                contentRelations.Add(UpdateIGetArticles_Content_Edges_Node_HeaderImagesEntity(session, child, entityIds));
            }

            return contentRelations;
        }

        private global::StrawberryShake.EntityId? UpdateIGetArticles_Content_Edges_Node_HeaderImagesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ContentRelation", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MyCMS.Web.Sample.Data.GraphQL.State.ContentRelationEntity? entity))
                {
                    session.SetEntity(entityId, new global::MyCMS.Web.Sample.Data.GraphQL.State.ContentRelationEntity(UpdateIGetArticles_Content_Edges_Node_HeaderImages_ReferredContentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "referredContent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::MyCMS.Web.Sample.Data.GraphQL.State.ContentRelationEntity(UpdateIGetArticles_Content_Edges_Node_HeaderImages_ReferredContentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "referredContent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetArticles_Content_Edges_Node_HeaderImages_ReferredContentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Content", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity? entity))
                {
                    session.SetEntity(entityId, new global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), entity.Body, entity.CreateDatetime, entity.CreateUser, entity.Attributes, entity.HeaderImages, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), default !, default !, default !, default !, default !, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ContentConnectionData
    {
        public ContentConnectionData(global::System.String __typename, global::MyCMS.Web.Sample.Data.GraphQL.State.PageInfoData? pageInfo = default !, global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEdgeData>? edges = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            PageInfo = pageInfo;
            Edges = edges;
        }

        public global::System.String __typename { get; }

        ///<summary>Information to aid in pagination.</summary>
        public global::MyCMS.Web.Sample.Data.GraphQL.State.PageInfoData? PageInfo { get; }

        ///<summary>A list of edges.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MyCMS.Web.Sample.Data.GraphQL.State.ContentEdgeData>? Edges { get; }
    }

    ///<summary>Information about pagination in a connection.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PageInfoData
    {
        public PageInfoData(global::System.String __typename, global::System.Boolean? hasNextPage = default !, global::System.Boolean? hasPreviousPage = default !, global::System.String? startCursor = default !, global::System.String? endCursor = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
            StartCursor = startCursor;
            EndCursor = endCursor;
        }

        public global::System.String __typename { get; }

        ///<summary>Indicates whether more edges exist following the set defined by the clients arguments.</summary>
        public global::System.Boolean? HasNextPage { get; }

        ///<summary>Indicates whether more edges exist prior the set defined by the clients arguments.</summary>
        public global::System.Boolean? HasPreviousPage { get; }

        ///<summary>When paginating backwards, the cursor to continue.</summary>
        public global::System.String? StartCursor { get; }

        ///<summary>When paginating forwards, the cursor to continue.</summary>
        public global::System.String? EndCursor { get; }
    }

    ///<summary>An edge in a connection.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ContentEdgeData
    {
        public ContentEdgeData(global::System.String __typename, global::System.String? cursor = default !, global::StrawberryShake.EntityId? node = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Cursor = cursor;
            Node = node;
        }

        public global::System.String __typename { get; }

        ///<summary>A cursor for use in pagination.</summary>
        public global::System.String? Cursor { get; }

        ///<summary>The item at the end of the edge.</summary>
        public global::StrawberryShake.EntityId? Node { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class MyCMSClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Content" => ParseContentEntityId(obj, __typename),
                "User" => ParseUserEntityId(obj, __typename),
                "ContentAttribute" => ParseContentAttributeEntityId(obj, __typename),
                "ContentRelation" => ParseContentRelationEntityId(obj, __typename),
                "Attribute" => ParseAttributeEntityId(obj, __typename),
                "AttributeOption" => ParseAttributeOptionEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Content" => FormatContentEntityId(entityId),
                "User" => FormatUserEntityId(entityId),
                "ContentAttribute" => FormatContentAttributeEntityId(entityId),
                "ContentRelation" => FormatContentRelationEntityId(entityId),
                "Attribute" => FormatAttributeEntityId(entityId),
                "AttributeOption" => FormatAttributeOptionEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseContentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatContentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUserEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatUserEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseContentAttributeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatContentAttributeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseContentRelationEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatContentRelationEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAttributeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatAttributeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAttributeOptionEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatAttributeOptionEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class MyCMSClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public MyCMSClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
